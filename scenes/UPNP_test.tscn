[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var _discover_peer: PacketPeerUDP
var _game_peers: Dictionary
var _game_peer_objects: Array
var _heartbeat_timer: Timer = Timer.new()
var _id: String
var _lobby_peer: PacketPeerUDP
var _state: String = \"HIDDEN\"

func _on_heartbeat_timer_timeout():
	if _state == \"DISCOVERED\" || _state == \"CONNECTED\":
		_lobby_peer.put_packet(JSON.print({\"type\": \"KEEPALIVE\", \"peerID\": _id}).to_utf8())

func _on_ack_discover(discover_response):
	_id = discover_response.peer.id
	_state = \"DISCOVERED\"

	_lobby_peer.put_packet(JSON.print({\"type\": \"JOIN\", \"host\": true, \"lobby\": \"ABCD\", \"peerID\": _id}).to_utf8())
	_heartbeat_timer.start()

func _on_ack_join(join_response):
	_id = join_response.peer.id

	print(\"Joined lobby with id: {id} at {address}:{port}\".format({\"id\": _id, \"address\": join_response.peer.address, \"port\": join_response.peer.port}))

func _on_join(join_message):
	print(\"Peer joined with ID: {id}\".format({\"id\": join_message.peer.id}))
	
	if _state == \"DISCOVERED\":
		_state = \"CONNECTED\"
		_discover_peer.close()
		print(_discover_peer.listen(31400))
	
	_game_peer_objects.append(join_message.peer)

	var _new_peer: PacketPeerUDP = PacketPeerUDP.new()

	_game_peers[join_message.peer.id] = _new_peer

	print(_new_peer.connect_to_host(join_message.peer.address, join_message.peer.port))

	var _peer_punch_timer: Timer = Timer.new()

	_peer_punch_timer.connect(\"timeout\", self, \"_on_peer_punch_timer_timeout\", [join_message.peer])

	add_child(_peer_punch_timer)

	_peer_punch_timer.start(1)

func _on_peer_punch_timer_timeout(peer):
	var _peer: PacketPeerUDP = _game_peers[peer.id]

	_peer.put_packet(JSON.print({\"type\": \"PUNCH\", \"peerID\": _id}).to_utf8())

func _ready():
	_discover_peer = PacketPeerUDP.new()
	_lobby_peer = PacketPeerUDP.new()

	print(_discover_peer.connect_to_host(\"127.0.0.1\", 31400))
	print(_lobby_peer.connect_to_host(\"127.0.0.1\", 31401))

	_discover_peer.put_packet(JSON.print({\"type\": \"DISCOVER\"}).to_utf8())

	_heartbeat_timer.wait_time = 1

	_heartbeat_timer.connect(\"timeout\", self, \"_on_heartbeat_timer_timeout\")

	add_child(_heartbeat_timer)

func _process(_delta):
	if _lobby_peer.get_available_packet_count() > 0:
		print(\"received lobby message\")
		var _message_json = JSON.parse(_lobby_peer.get_packet().get_string_from_utf8()).result

		match _message_json.type:
			\"ACK\":
				print(\"message ackd\")

			\"ACK_JOIN\":
				_on_ack_join(_message_json)

			\"JOIN\":
				_on_join(_message_json)

	if _discover_peer.get_available_packet_count() > 0:
		var _message_json = JSON.parse(_discover_peer.get_packet().get_string_from_utf8()).result

		match _message_json.type:
			\"ACK_DISCOVER\":
				_on_ack_discover(_message_json)

			\"PUNCH\":
				print(\"Received punch from peer: {id}\".format({\"id\": _message_json.peerID}))
"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )
